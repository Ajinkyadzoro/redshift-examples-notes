1) Columnar DB are better for compression
2) Better compression means better Disko-IO
3) OLAP - Write once and read many
4) Redshift uses PostGreSQL 8.0.2
5) 3 components of redshift cluster are
	A) Leader node
	B) Compute node
	C) Node slices which are part of the compute node.



Lecture 9:
===========================================================================================

1) Databases: It is a collection of different objects like schemas,tables etc.

2) Schemas: It consist of tables as well as other kind of named objects, by default a DB has a single schema which is PUBLIC. you can use schemas to Group database objects under common name. It is similar to directories of OS. 
except schemas can not have nested schemas within it.

3) Tables: When you load data into tables, redshift distributes the rows of the tables by the tables distribution style.
Number of node slices also depend on the number of nodes into the cluster.

4) Views: It is like a wrapper that binds the complex SQL query.

5) UDFs: User defined functions, can be written in Both SQL and Python


Lecture 10:
===========================================================================================

Node types
1) ds2.xlarge
2) ds2.8xlarge

1) dc1.large
1) dc1.8xlarge
1) dc2.large
1) dc2.8xlarge

( 1-> previous gen, 2-> current generation)

Lecture 31:
===========================================================================================

1) If you create a table with '#' prefix it will create a temporary table.
2) Temporary tables are only valid for that session.

Lecture 32:
===========================================================================================

Choosing the right Distribution Styles
The motive in selecting a table distribution style is to minimize the impact of the redistribution by relocating the data where it was prior to the query execution. 
Choosing the right KEY is not as straightforward as it may seem. In fact, setting wrong DISTKEY can even worsen the query performance.

Choose columns used in the query that leads to least skewness as the DISTKEY. The good choice is the column with maximum distinct values, such as the timestamp. Avoid columns with few distinct values, such as months of the year, payment card types.

If the table(e.g. fact table) is highly de-normalised and no JOIN is required, choose the EVEN style.

Choose ALL style for small tables that do not often change. For example, a table containing telephone ISD codes against the country name.

It is beneficial to select a KEY distribution if a table is used in JOINS. Also,  consider the other joining tables and their distribution style.
If one particular node contains the skew data, the processing on this node will be slower. This results in much longer total query processing time. This query under skewed configuration may take even longer than the query made against the table without a DISTKEY
